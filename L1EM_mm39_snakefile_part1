#!/bin/bash

# Script to execute L1-EM pipeline
# Copyright (C) 2019 Wilson McKerrow

#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.

#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.

 #   You should have received a copy of the GNU General Public License
 #   along with this program.  If not, see <https://www.gnu.org/licenses/>.

# Usage: bash run_L1EM.sh /fullpathto/alignments.bam /fullpathto/L1EM /fullpathto/mm39.fa


import os


WORKDIR = os.getcwd() # Working directory
L1EM_directory = "/data/hallvaaw/rna_seq/L1EM" # NB! MUST BE HARDCODED
mm39 = "/data/hallvaaw/rna_seq/mm39.fa" # NB! MUST BE HARDCODED



with open("/data/hallvaaw/rna_seq/paired_end.txt", "r") as file_:
    BAMFILES = file_.read().splitlines()



### Global variables

# Parameters
threads=16 #How many threads to use for samtools, bwa and L1EM
realignNM=2 #Number of mismatches allowed in bwa realignment
L1EM_NM=2 # Number of mismatches allowed when enumerated candidate alignments
NMdiff=1 #Skip candidate alignments with greater than this many more mismatches than the best alignment
bwa_i=20 #bwa i parameter prevents indels near the edges of a read
error_prob=0.01 #Probability of a read error at a given position
max_start2start_len=500 #Max allowed template/fragment length
reads_per_pickle=10000 #Number of rows in each G(R) matrix chunk. Decrease if memory usage is too high.
EM_threshold=1e-6 #Keep taking EM steps until no entry in X changes by more than this value. Increasing this parameter will shorten run time.
template_fraction=1 #Fraction of reads to consider when calculated median template length.

# If you need to specify paths to required packages
# bwa=$(which bwa) # version 0.7.17 tested
# samtools=$(which samtools) # version 1.9 tested
# python=$(which python) # use version 2.7

# Command line arguments

L1EM_bed=f"{L1EM_directory}/annotation/mm39.L1EM.bed"
L1EM_fa=f"{L1EM_directory}/annotation/mm39.L1EM.400.fa"
L1EM_code_dir=f"{L1EM_directory}/L1EM/"
L1EM_utilities_dir=f"{L1EM_directory}/utilities/"
L1EM_CGC_dir=f"{L1EM_directory}/CGC/"



# Try to realign unaligned reads using bwa aln.

rule all:
    input:
        expand("/data/hallvaaw/rna_seq/L1EM/split_fqs/{bamfile}_L1.fq1", bamfile = BAMFILES),
        expand("/data/hallvaaw/rna_seq/L1EM/split_fqs/{bamfile}_L1.fq2", bamfile = BAMFILES)


# checkpoint create_directories:
#     output:
#        idL1reads = directory("/data/hallvaaw/rna_seq/L1EM/idL1reads"),
#        split_fqs = directory("/data/hallvaaw/rna_seq/L1EM/split_fqs"),
#        G_of_R = directory("/data/hallvaaw/rna_seq/L1EM/G_of_R")
# 
#     shell:
#         """
#         mkdir {output.idL1reads}
#         mkdir {output.split_fqs}
#         mkdir {output.G_of_R}
#         """

rule realign_1:
    input:
        bam = "/data/hallvaaw/rna_seq/{bamfile}_sorted.bam"

    output:
        unaligned_1 = "/data/hallvaaw/rna_seq/L1EM/idL1reads/{bamfile}_unaligned.fq1",
        unaligned_2 = "/data/hallvaaw/rna_seq/L1EM/idL1reads/{bamfile}_unaligned.fq2"

    shell:
        """
        echo 'STEP 1: realign'
        export PATH=/software/bwa/0.7.17/bin:$PATH
        export PATH=/software/miniconda2/bin:$PATH
        export PATH=/data/hallvaaw/software/miniconda3/include:/data/hallvaaw/software/miniconda3/bin:/data/common/software/bin:$PATH
        samtools view -@ {threads} -b -F 2 {input.bam} | samtools sort -@ {threads} -n - | samtools fastq - -1 {output.unaligned_1} -2 {output.unaligned_2}
        """

rule realign_2:
    input:
        unaligned_1 = "/data/hallvaaw/rna_seq/L1EM/idL1reads/{bamfile}_unaligned.fq1",
        unaligned_2 = "/data/hallvaaw/rna_seq/L1EM/idL1reads/{bamfile}_unaligned.fq2"

    output:
        sai1 = "/data/hallvaaw/rna_seq/L1EM/idL1reads/{bamfile}_1.sai",
        sai2 = "/data/hallvaaw/rna_seq/L1EM/idL1reads/{bamfile}_2.sai"

    shell:
        """
        bwa aln -k {realignNM} -n {realignNM} -t {threads} -i {bwa_i} {mm39} {input.unaligned_1} > {output.sai1}
        bwa aln -k {realignNM} -n {realignNM} -t {threads} -i {bwa_i} {mm39} {input.unaligned_2} > {output.sai2}
        """

rule realign_3:
    input:
        unaligned_1 = "/data/hallvaaw/rna_seq/L1EM/idL1reads/{bamfile}_unaligned.fq1",
        unaligned_2 = "/data/hallvaaw/rna_seq/L1EM/idL1reads/{bamfile}_unaligned.fq2",
        sai1 = "/data/hallvaaw/rna_seq/L1EM/idL1reads/{bamfile}_1.sai",
        sai2 = "/data/hallvaaw/rna_seq/L1EM/idL1reads/{bamfile}_2.sai"

    output:
        realigned = "/data/hallvaaw/rna_seq/L1EM/idL1reads/{bamfile}_realigned.bam",
        realigned_index = "/data/hallvaaw/rna_seq/L1EM/idL1reads/{bamfile}_realigned.bam.bai"

    shell:
        """
        bwa sampe {mm39} {input.sai1} {input.sai2} {input.unaligned_1} {input.unaligned_2} | samtools view -b -@ {threads} - | samtools sort -@ {threads} - > {output.realigned}
        samtools index {output.realigned} {output.realigned_index}
        """

rule extract_1:
    input:
        bamfile = "/data/hallvaaw/rna_seq/{bamfile}_sorted.bam",
        realigned = "/data/hallvaaw/rna_seq/L1EM/idL1reads/{bamfile}_realigned.bam"
    output:
        input_temp = "/data/hallvaaw/rna_seq/L1EM/idL1reads/{bamfile}_input_temp.bam",
        realigned_temp = "/data/hallvaaw/rna_seq/L1EM/idL1reads/{bamfile}_realigned_temp.bam"
    shell:
        """
        # Extract L1Md* aligning reads.
        echo 'STEP 2: extract'
        python {L1EM_utilities_dir}read_or_pair_overlap_bed.py {L1EM_bed} {input.bamfile} {output.input_temp}
        python {L1EM_utilities_dir}read_or_pair_overlap_bed.py {L1EM_bed} {input.realigned} {output.realigned_temp}
        """

rule extract_2:
    input:
        input_temp = "/data/hallvaaw/rna_seq/L1EM/idL1reads/{bamfile}_input_temp.bam",
        realigned_temp = "/data/hallvaaw/rna_seq/L1EM/idL1reads/{bamfile}_realigned_temp.bam"
    output:
        L1_1 = "/data/hallvaaw/rna_seq/L1EM/idL1reads/{bamfile}_L1.fq1",
        L1_2 = "/data/hallvaaw/rna_seq/L1EM/idL1reads/{bamfile}_L1.fq2"
    shell:
        """
        samtools sort -@ {threads} -n {input.input_temp} | samtools fastq - -1 {output.L1_1} -2 {output.L1_2}
        samtools sort -@ {threads} -n {input.realigned_temp} | samtools fastq - -1 temp.fq1 -2 temp.fq2
        cat temp.fq1 >> {output.L1_1}
        cat temp.fq2 >> {output.L1_2}
        rm temp*
        """


rule split_fq_files:
    input:
        L1_1 = "/data/hallvaaw/rna_seq/L1EM/idL1reads/{bamfile}_L1.fq1",
        L1_2 = "/data/hallvaaw/rna_seq/L1EM/idL1reads/{bamfile}_L1.fq2"
    output:
        L1_1 = "/data/hallvaaw/rna_seq/L1EM/split_fqs/{bamfile}_L1.fq1",
        L1_2 = "/data/hallvaaw/rna_seq/L1EM/split_fqs/{bamfile}_L1.fq2"
    shell:
        """
        # Split the L1 fastq files for parallel execution
        n_threads={threads}
        n_lines=$(wc -l {input.L1_1})
        split_fq_size=$($n_lines/$n_threads*10*4+1 | cut -d '.' -f 1 | awk '{print $1*4}')
        split_fq_size=$(wc -l {input.L1_1} | awk '{print $1/('$threads'*10*4)+1}' | cut -d '.' -f 1 | awk '{print $1*4}')
        echo $split_fq_size
        """



# split_fq_size=$($n_lines/($n_threads*10*4+1)) | cut -d '.' -f 1 | awk '{print ${1}*4}')
# split -l $split_fq_size {input.L1_1} {output.L1_1} 
# split -l $split_fq_size {input.L1_2} {output.L1_2} 
