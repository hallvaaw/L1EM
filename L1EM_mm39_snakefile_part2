#!/bin/bash

# Script to execute L1-EM pipeline
# Copyright (C) 2019 Wilson McKerrow

#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.

#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.

 #   You should have received a copy of the GNU General Public License
 #   along with this program.  If not, see <https://www.gnu.org/licenses/>.

# Usage: bash run_L1EM.sh /fullpathto/alignments.bam /fullpathto/L1EM /fullpathto/mm39.fa


import os


WORKDIR = os.getcwd() # Working directory
L1EM_directory = "/data/hallvaaw/rna_seq/L1EM" # NB! MUST BE HARDCODED
mm39 = "/data/hallvaaw/rna_seq/mm39.fa" # NB! MUST BE HARDCODED



with open("/data/hallvaaw/rna_seq/paired_end.txt", "r") as file_:
    BAMFILES = file_.read().splitlines()



### Global variables

# Parameters
threads=16 #How many threads to use for samtools, bwa and L1EM
realignNM=2 #Number of mismatches allowed in bwa realignment
L1EM_NM=2 # Number of mismatches allowed when enumerated candidate alignments
NMdiff=1 #Skip candidate alignments with greater than this many more mismatches than the best alignment
bwa_i=20 #bwa i parameter prevents indels near the edges of a read
error_prob=0.01 #Probability of a read error at a given position
max_start2start_len=500 #Max allowed template/fragment length
reads_per_pickle=10000 #Number of rows in each G(R) matrix chunk. Decrease if memory usage is too high.
EM_threshold=1e-6 #Keep taking EM steps until no entry in X changes by more than this value. Increasing this parameter will shorten run time.
template_fraction=1 #Fraction of reads to consider when calculated median template length.

# If you need to specify paths to required packages
# bwa=$(which bwa) # version 0.7.17 tested
# samtools=$(which samtools) # version 1.9 tested
# python=$(which python) # use version 2.7

# Command line arguments

L1EM_bed=f"{L1EM_directory}/annotation/mm39.L1EM.bed"
L1EM_fa=f"{L1EM_directory}/annotation/mm39.L1EM.400.fa"
L1EM_code_dir=f"{L1EM_directory}/L1EM/"
L1EM_utilities_dir=f"{L1EM_directory}'/utilities/"
L1EM_CGC_dir=f"{L1EM_directory}/CGC/"



# Try to realign unaligned reads using bwa aln.

rule all:
    input:
        expand("/data/hallvaaw/rna_seq/L1EM/G_of_R/{bamfile}_baminfo_final.txt", bamfile = BAMFILES),
        expand("/data/hallvaaw/rna_seq/L1EM/{bamfile}_full_counts.txt", bamfile = BAMFILES),
        expand("/data/hallvaaw/rna_seq/L1EM/{bamfile}_filter_active_L1Md_FPM.txt", bamfile = BAMFILES)


rule candidate_alignments:
    output:
        dynamic("/data/hallvaaw/rna_seq/L1EM/split_fqs/")

    shell:
        """
        # Generate candidate alignments
        echo 'STEP 3: candidate alignments'
        for name in /data/hallvaaw/rna_seq/L1EM/split_fqs/*.fq1.*
        do
            reads1=$name
            reads2=$(echo $name|sed 's/fq1/fq2/g')
            ref={L1EM_fa}
            base=$(echo $name|sed 's/.fq1//g')
            bwa aln -t {threads} -N -n {L1EM_NM} -k {L1EM_NM} -i {bwa_i} -R 10000000 {ref} $reads1 > {output}$base.R1.aln.sai
            bwa aln -t {threads} -N -n {L1EM_NM} -k {L1EM_NM} -i {bwa_i} -R 10000000 {ref} $reads2 > {output}$base.R2.aln.sai
            bwa sampe -n 10000000 -N 10000000 $ref {output}$base.R1.aln.sai {output}$base.R2.aln.sai $reads1 $reads2 > {output}temp.$base.aln.sam
            samtools view -@ {threads} -bS {output}temp.$base.aln.sam > {output}temp.$base.aln.bam
            samtools sort -@ {threads} -n {output}temp.$base.aln.bam > {output}$base.aln.bam
#            rm temp.$base.aln.sam temp.$base.aln.bam $base.R1.aln.sai $base.R2.aln.sai
        done
        """

rule matrix_construction:
    input:
        bam = "/data/hallvaaw/rna_seq/{bamfile}_sorted.bam"
    output:
        baminfo = "/data/hallvaaw/rna_seq/L1EM/G_of_R/{bamfile}_baminfo.txt",
        bamlist_1 = "/data/hallvaaw/rna_seq/L1EM/{bamfile}_bamlist_1.txt",
        bamlist_2 = "/data/hallvaaw/rna_seq/L1EM/{bamfile}_bamlist_2.txt",
        g_of_r_list = "/data/hallvaaw/rna_seq/L1EM/{bamfile}_G_of_R_list.txt",
        te_list = "/data/hallvaaw/rna_seq/L1EM/{bamfile}_TE_list.txt"
    shell:
        """
        # Make G_of_R matrix
        echo 'STEP 4: G(R) matrix construction'
        python {L1EM_CGC_dir}median_template_and_pairs.py {input.bam} 0.001 > {output.baminfo}
        medianinsert=$(head -1 {output.baminfo})
        ls /data/hallvaaw/rna_seq/L1EM/split_fqs/*.bam > {output.bamlist_1}
        split -l {threads} {output.bamlist_1} {output.bamlist_2} 
        for bamlist in {output.bamlist_2}*
        	do for bamfile in $(cat $bamlist)
        		do python {L1EM_code_dir}G_of_R.py -b /data/hallvaaw/rna_seq/L1EM/split_fqs/$bamfile -i $medianinsert -p $(echo $bamfile| cut -d '/' -f 3) -e {error_prob} -m {max_start2start_len} -r {reads_per_pickle} -n {NMdiff} &
        	done
        	wait
        done
        ls /data/hallvaaw/rna_seq/L1EM/G_of_R/*pk2 > {output.g_of_r_list}
        cp $(ls /data/hallvaaw/rna_seq/L1EM/G_of_R/*TE_list.txt | head -1) {output.te_list}
        """

rule run_em_2:
    input:
        g_of_r_list = "/data/hallvaaw/rna_seq/L1EM/{bamfile}_G_of_R_list.txt",
        te_list = "/data/hallvaaw/rna_seq/L1EM/{bamfile}_TE_list.txt"
    output:

    shell:
        """
        # RUN EM
        python {L1EM_code_dir}L1EM.py -g {input.g_of_r_list} -l {input.te_list} -t {threads} -s {EM_threshold}
        """


rule write_results:
    input:
        baminfo = "/data/hallvaaw/rna_seq/L1EM/G_of_R/{bamfile}_baminfo.txt",
    output:
        baminfo_final = "/data/hallvaaw/rna_seq/L1EM/G_of_R/{bamfile}_baminfo_final.txt",
        full_counts = "/data/hallvaaw/rna_seq/L1EM/{bamfile}_full_counts.txt",
        filter_active = "/data/hallvaaw/rna_seq/L1EM/{bamfile}_filter_active_L1Md_FPM.txt",
        names_final =  "/data/hallvaaw/rna_seq/L1EM/{bamfile}_names_final.pkl",
        x_final =  "/data/hallvaaw/rna_seq/L1EM/{bamfile}_X_final.pkl"

    shell:
        """
        #Write results as text file
        echo 'STEP 6: Writing results'
        
        python {L1EM_utilities_dir}L1EM_readpairs.py >> {output.baminfo_final}
        python {L1EM_utilities_dir}report_l1_exp_counts.py > {output.full_counts}
        python {L1EM_utilities_dir}filtered_and_normalized_active_l1md.py {output.filter_active} {output.x_final} $(head -2 {input.baminfo} | tail -1) $(head -3 {input.baminfo} | tail -1)> {output.filter_active}
        """

#Clean up
# echo 'STEP 7: Clean up'
# cp *final.pkl ../
# cd ..

# rm idL1reads/*
# rmdir idL1reads
# rm split_fqs/*
# rmdir split_fqs
# rm G_of_R/*
# rmdir G_of_R
# rm L1EM/*
# rmdir L1EM
